generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id             String        @id @default(cuid())
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    email          String        @unique
    type           String //admin, moder, org-owner, org-admin
    name           String?
    password       String?
    repassword     String?
    phone          String?
    block          Boolean       @default(false)
    delete         Boolean       @default(false)
    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String?
    phone     String   @unique
    code      String   @default("0000")
    email     String?
    block     Boolean  @default(false)
    delete    Boolean  @default(false)
    avatar    String?
    orders    Order[] // заказы пользователя
    pets      Pet[] // питомцы пользователя
    ads       Ad[] // объявления пользователя
}

//Ветеринарная оргианизация
model Organization {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    publish     Boolean  @default(true) // статус публикации
    delete      Boolean  @default(false) // статус удаления
    name        String // название организации
    logo        String // логотип организации
    description String // описание организации
    city        String? // город* данный параметр пока не будет использоваться
    email       String? // контактный адрес эл. почты организации
    phone       String? // контактный телефон кол центра организации
    links       String[] // массив ссылок на сторонние ресурсы
    categories  String[] // категория оргаизации: vet, salon, shop
    admins      Admin[] // администраторы и модераторы организации
    goods       Good[] // товары и услуги которые предоставляет организация
    branchs     Branch[]
    orders      Order[] // список заказов организации
}

model Branch {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    publish        Boolean      @default(true) // статус публикации
    delete         Boolean      @default(false) // статус удаления
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    orders         Order[] // список заказов филиала
    schedule       Schedule[] // расписание времени работы
    goods          Good[] // товары филиала
    address        String // адрес физического расположения
    phone          String // контактный телефон филиала
    images         String[] // массив изображений
}

// Расписание работы
model Schedule {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    branch    Branch   @relation(fields: [branchId], references: [id])
    branchId  String
    day       String
    startTime Int      @default(0) // время начала работы в минутах относительно  00:00
    endTime   Int      @default(0) // время окончания работы в минутах относительно  00:00
    allTime   Boolean  @default(false) // устанавливается true если в этот день работает круглосуточно
    dayOff    Boolean  @default(false) // устанавливается true если в этот день не работает
}

//Товар или услуга предоставляемая организацией
model Good {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    publish        Boolean      @default(true) // статус публикации
    delete         Boolean      @default(false) // статус удаления
    name           String // название 
    description    String // описание 
    price          Int // цена за оказываемую услугу или товар
    images         String[] // изображения услуги
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    branchs        Branch[]
    type           String // тип товара: service, product, enimal
    carts          Cart[]
    categories     String[]
}

// Акция 
// model Stock {
//     id             String       @id @default(cuid())
//     createdAt      DateTime     @default(now())
//     updatedAt      DateTime     @updatedAt
//     publish        Boolean      @default(true) // статус публикации
//     delete         Boolean      @default(false) // статус удаления
//     deadline       DateTime // срок действия акции до конца дня
//     name           String // название акции
//     description    String // описание акции
//     code           String? // промокод* данный параметр пока не будет использоваться. это на будущее 
//     organization   Organization @relation(fields: [organizationId], references: [id])
//     organizationId String
// }

// Корзина
model Cart {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    count     Int      @default(1) // количестов товара, на услуги не используется
    good      Good     @relation(fields: [goodId], references: [id]) //товар или услуга в корзине
    goodId    String
}

// Заказы
model Order {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    status         String // статус заказа: new, confirmed, done, canceled
    goods          Json[] // копися списка корзины(Cart) или услуг которые заказал клиент
    date           DateTime? // время записи, используется только на услуги
    comment        String? // комментарий к заказу
    user           User         @relation(fields: [userId], references: [id]) // пользователь сделавший заказ
    userId         String
    anotherUser    Json? // контактная информаци если пользователь делает заказ не для себя
    branch         Branch       @relation(fields: [branchId], references: [id])
    branchId       String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

// Питомец
model Pet {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    birthday  DateTime // дата рождения питомца
    name      String? // имя питомца
    kind      String // вид животного: кошка, собака и.т.д
    breed     String // порода животного
    gender    String // пол животного
    owner     User     @relation(fields: [userId], references: [id])
    userId    String
    parents   Pet[]    @relation("ChildParents") // родителя пиотомца
    childrens Pet[]    @relation("ChildParents") // дети питомца
    images    String[] // изображения питомца или его документов
    ads       Ad[]
}

// Объявления
model Ad {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    publish     Boolean  @default(true) // статус публикации
    delete      Boolean  @default(false) // статус удаления
    title       String // заголовок объявления
    description String // описание объявления
    pet         Pet?     @relation(fields: [petId], references: [id]) // можно прикрепить своего питомца если его нужно отдать или продать
    petId       String?
    price       Int      @default(0) // цена за предоставляемого питомца 0 - бесплатно
    images      String[] // изображения объявления
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    viewCount   Int      @default(0)
}
